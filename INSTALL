    1. Installing PyBlosxom
        1. Prerequisites
        2. Simple Installation
        3. Complicated Installation
        4. Changing the Looks of the blog
        5. Using .htaccess
    1. Other Examples
        Denying access to config.py or the INI file
    1. Using a different library path for PyBlosxom files
    2. Denying configuration via .htaccess

                            1 Installing PyBlosxom

1.1 Prerequisites

   You need [WWW] python and a text editor

1.2 Simple Installation

   For a simple installation,
     * Run the comand python setup.py install as superuser (root on u*ix)
       to install the Pyblosxom librarys in your python installation.
     * Then copy the content of the web/ directory into your cgi-bin.
     * Create some content in a directory TODO: should there be a simple
       site in the distribution?
     * Edit config.py in your cgi-bin. It is well commented so it
       shoulden't be to hard.
     * Surf away to your new blog.

1.3 Complicated Installation

   If you don't have superuser access on your webserver you might need to
   install the Pyblosxom librarys in a non standard directory and change
   the PYTHONPATH enviroment variable accordingly. If you don't want to
   use the bloggerAPI and other (not planned yet) xmlrpc capabilities,
   remove xmlrpc.cgi from your cgi-bin/ directory.

1.4 Changing the Looks of the blog

   In the contrib/flavour_examples/ directory you find some examples on
   how you can change the looks of your site by using flavours, just copy
   them into your content directory and reload your blog. You can also
   add ?flav=<name> where <name> is the name of your flavours name

1.5 Using .htaccess

   Using .htaccess allows you to customise your installation so that your
   URL will not look like this:
http://www.example.com/cgi-bin/pyblosxom.cgi

   This does not make the site url easily accessible. You might want to
   access your site with URLs like:
http://www.example.com/blog

   Which looks nicer for people to type it. If you are allowed .htaccess
   modifications by your hosting provider, and they allow Options
   overriding, this is what you can do with your PyBlosxom installation.

   Rename pyblosxom.cgi to blog (ensure that pyblosxom.cgi works first in
   your normal installation).

   Add these lines to your .htaccess file:
Options ExecCGI

<Files blog>
ForceType application/cgi-script
SetHandler cgi-script
</Files>

   This will ensure that blog will be executed instead of viewed with
   text/plain.

   If you want to access blosxom as your main page, without even
   accessing the /blog url, you can point blog to a directory index. This
   will allow you to access your blog as:
http://www.example.com

   Your blog will work as per normal. For this type of installation to
   work, you need to add one more line in your .htaccess:
DirectoryIndex blog

   There you go :)

  1.5.1 Other Examples

   Other ways of installing pyblosxom and hiding the cgi-bin/ cruft can
   be found at
   http://www.raelity.org/apps/blosxom/faq.shtml#general_hiding_blosxom_cgi
   although the instructions are blosxom related, but it does apply to
   pyblosxom in general.

1.6 Denying access to config.py or the INI file

   In order to prevent visitors from peeking your configuration files,
   you can do it a couple of ways:
     * Storing Pyblosxom/ and config.py outside of the web server's
       document root.
     * Denying via .htaccess

  1.6.1 Using a different library path for PyBlosxom files

   If you install the Pyblosxom/ directory elsewhere, outside of your
   www/ or cgi-bin/ directory, you can place config.py there as well.
   Here's a simple scenario:
     * You installed pyblosxom.cgi in /home/joe/www
     * You wanted lib/ to be in /home/joe/pyblosxom directory
     * Place the config.py in /home/joe/pyblosxom` directory

   Your install tree should look like this:
.
`-- home
    `-- joe
        |-- pyblosxom
        |   |-- config.py
        |   `-- Pyblosxom
        |       |-- pyblosxom.py
        |       `-- tools.py
        `-- www
            |-- pyblosxom.cgi
            `-- .htaccess

   You will also need to modify your pyblosxom.cgi and add the path of
   your pyblosxom installation:
    1 import sys
    2 sys.path.append('/home/joe/pyblosxom')

  1.6.2 Denying configuration via .htaccess

   If you want to install PyBlosxom in one directory, you will need to
   use .htaccess to deny access to config.py. This is as simple as:
<Files config.py>
order deny, allow
deny from all
</Files>
