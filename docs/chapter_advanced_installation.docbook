<!--
  CHAPTER ADVANCED INSTALLATION
-->
<chapter id="advancedinstallation">
<title>Advanced Installation</title>
<para>
Don't try any of this until you've gotten your blog up and running.
</para>
<para>
This chapter covers additional advanced things you can do to your blog
that will make it nicer.  However, they're not necessary and they're
advanced and we consider these things to be very much a "you're on your
own" kind of issue.
</para>
<para>
If you ever have problems with PyBlosxom and you ask us questions on
the pyblosxom-users or pyblosxom-devel mailing lists, make sure you
explicitly state what things you've done from this chapter.  It'll
go a long way in helping us to help you.
</para>


<sect1>
<title>Using mod_python, Twisted or WSGI</title>
<para>
PyBlosxom 1.2 has preliminary support for other frameworks than CGI.  While
we think it works fine, it could use some more testing.
</para>
<para>
FIXME - need instructions for setting up with mod_python, Twisted, and WSGI.
</para>
</sect1>


<sect1>
<title>Renaming the pyblosxom.cgi Script</title>
<para>
In the default installation, the PyBlosxom script is named 
<filename>pyblosxom.cgi</filename>.
</para>
<para>
For a typical user on an Apache installation with user folders turned on, PyBlosxom
URLs could look like this:
</para>
<programlisting role="text">
http://www.joe.com/~joe/cgi-bin/pyblosxom.cgi
http://www.joe.com/~joe/cgi-bin/pyblosxom.cgi/an_entry.html
http://www.joe.com/~joe/cgi-bin/pyblosxom.cgi/programming/another_entry.html 
</programlisting>
<para>
That gets pretty long and it's not very good looking.  Telling your mother
the URL over the phone would be difficult.  It would be nice if we could 
shorten it.
</para>
<para>
So, we have some options:
</para>
<orderedlist numeration="arabic">
<listitem>
<para>
Change the name of the <filename>pyblosxom.cgi</filename> script. 
</para>
</listitem>
<listitem>
<para>
And if that's not good enough for you, use the Apache mod_rewrite module to get 
URLs internally redirected to the <filename>pyblosxom.cgi</filename> script.
</para>
</listitem>
</orderedlist>
<para>
Both methods are described here in more detail.
</para>

<sect2>
<title>Change the Name of the pyblosxom.cgi Script</title>
<para>
There's no reason that <filename>pyblosxom.cgi</filename> has to be named 
<filename>pyblosxom.cgi</filename>.  Let's try changing it from 
<filename>pyblosxom.cgi</filename> to <filename>blog</filename>.  Now our example 
URLs look like this:
</para>
<programlisting role="text">
http://www.joe.com/~joe/cgi-bin/blog
http://www.joe.com/~joe/cgi-bin/blog/an_entry.html
http://www.joe.com/~joe/cgi-bin/blog/category1/another_entry.html 
</programlisting>
<para>
That's better looking in the example.  In your specific circumstances, that
may be all you need.
</para>
<para>
You might have to change the <varname>base_url</varname> property in your 
<filename>config.py</filename> file to match the new URL.
</para>

<warning>
  <title>warning: base_url value</title>
  <para>
    The base_url property should NOT have a trailing slash.
  </para>
</warning>
    
<para>
If you're running on Apache, you might have to tell Apache that this is a CGI
script even if it doesn't have a <filename>.cgi</filename> at the end of it.  If 
you can use <filename>.htaccess</filename> files to override Apache settings, you 
might be able to do something like this:
</para>
<programlisting role="htaccess"><![CDATA[
# this allows execution of CGI scripts in this directory
Options ExecCGI 
 
# if the user doesn't specify a file, then instead of doing the
# regular directory listing, we look at "blog" (which is our
# pyblosxom.cgi script renamed)
DirectoryIndex blog 
 
# this tells Apache that even though "blog" doesn't end in .cgi,
# it is in fact a CGI script and should be treated as such
<Files blog> 
ForceType application/cgi-script  
SetHandler cgi-script  
</Files> 
]]></programlisting>
<para>
You may need to stop and restart Apache for your Apache changes to take effect.
</para>
</sect2>

<sect2>
<title>Hiding the .cgi with RewriteRule</title>
<para>
Apache has a module for URL rewriting which allows you to convert incoming
URLs to other URLs that can be handled internally.  You can do URL rewriting
based on all sorts of things.  See the Apache manual for more details.
</para>
<para>
In our case, we want all incoming URLs pointing to <filename>blog</filename> to 
get rewritten to <filename>cgi-bin/pyblosxom.cgi</filename> so they can be handled 
by PyBlosxom.  Then all our URLs will look like this:
</para>
<programlisting role="text">
http://www.joe.com/~joe/blog
http://www.joe.com/~joe/blog/an_entry.html
http://www.joe.com/~joe/blog/category1/another_entry.html 
</programlisting>
<para>
To do this, we create an .htaccess file (it has to be named exactly that)
in our <filename>public_html</filename> directory (or wherever it is that /~joe/ 
points to).  In that file we have the following code:
</para>
<programlisting role="htaccess">
RewriteEngine on
RewriteRule    ^blog?(.*)$      /~joe/cgi-bin/pyblosxom.cgi$1      [last]
</programlisting>
<para>
The first line turns on the Apache mod_rewrite engine so that it will rewrite
URLs.
</para>
<para>
The second line has four parts.  The first part denotes the line as a RewriteRule.
The second part states the regular expression that matches the part of the URL
that we want to rewrite.  The third part denotes what we're rewriting the URL
to.  The fourth part states that after this rule is applied, no future rewrite 
rules should be applied.
</para>
<para>
If you do URL rewriting, you may have to set the base_url property in your
<filename>config.py</filename> accordingly.  In the above example, the 
<varname>base_url</varname> would be <literal>http://www.joe.com/~joe/blog</literal> 
with no trailing slash.
</para>
<para>
For more information on URL re-writing, see the Apache documentation.
</para>
</sect2>
</sect1>

</chapter>
