<!--
  CHAPTER FLAVOURS
-->
<chapter>
<title>Flavours</title>
<para>
PyBlosxom takes the data provided in the entries and by the plugins and
transforms it into output using renderers.  Output can be in html, xhtml, 
xml, or anything else--anything that you could get back from a CGI 
script or web application.  The default renderer can be set in your 
config file like this:
</para>

<example><title>renderer variable value</title>
<programlisting role="python">py["renderer"] = "blosxom"
</programlisting>
</example>

<para>
PyBlosxom comes with two renderers: blosxom and debug.
</para>
<para>
The debug renderer displays all the data in the various parts of the 
PyBlosxom Request object.  This is really helpful to see what variables 
are at your disposal and also to debug problems you might be having with 
plugins you've installed.
</para>
<para>
The blosxom renderer renders entries just like Blosxom does.
</para>
<para>
If you want your blog rendered using a different template system--say
Cheetah or htmltmpl--implement a renderer that renders the output.  This
can be done as a PyBlosxom plugin.  See the chapter on writing plugins
for more information.
</para>
<para>
The rest of this chapter talks about the various things you can do with
the blosxom renderer which comes with PyBlosxom.
</para>

<sect1>
<title>Flavours and Templates</title>
<para>
The blosxom renderer uses the same template style that Blosxom uses.  As
such, you can use most Blosxom flavour templates and only have to make some
minor modifications.
</para>
<para>
A flavour can be thought of as a theme or an output format.  For example,
you could have an "html" flavour that renders the blog data in html format.
You could have an "xhtml" flavour that renders the blog in a strict xhtml
format.  You could have a "happy-sunshine" flavour that renders the blog
in html format using a happy sunshiney look and feel.  You can have an
"rss" flavour that renders the output in RSS 2.0 format with enclosures.
So on and so forth.
</para>
<para>
A flavour consists of a series of templates each of which is a part of 
the page that finally gets rendered.  The minimum set of templates are
these:
</para>
<itemizedlist>
<listitem><para>content_type - holds the content type of the flavour</para></listitem>
<listitem><para>head - holds everything before all the entries</para></listitem>
<listitem><para>story - holds a single entry</para></listitem>
<listitem><para>foot - holds everything after all the entries</para></listitem>
<listitem><para>date_head - shows at the start of a date</para></listitem>
<listitem><para>date_foot - shows at the end of a date</para></listitem>
</itemizedlist>
<para>
You can have other templates as well.  Many plugins require additional
templates in order to work.
</para>
<para>
The template files for a given flavour all have the same file extension which
is the flavour's name.  For example, if you were using an "html" flavour,
the flavour itself would be composed of the following files:
</para>
<itemizedlist>
<listitem><para>content_type.html</para></listitem>
<listitem><para>head.html</para></listitem>
<listitem><para>story.html</para></listitem>
<listitem><para>foot.html</para></listitem>
<listitem><para>date_head.html</para></listitem>
<listitem><para>date_foot.html</para></listitem>
</itemizedlist>
<para>
If you want to create a "joy" flavour, you would have the following files:
</para>
<itemizedlist>
<listitem><para>content_type.joy</para></listitem>
<listitem><para>head.joy</para></listitem>
<listitem><para>story.joy</para></listitem>
<listitem><para>foot.joy</para></listitem>
<listitem><para>date_head.joy</para></listitem>
<listitem><para>date_foot.joy</para></listitem>
</itemizedlist>
<para>
You can have as many flavours as you want in your blog.
</para>

<warning>
  <title>be careful with your flavour names</title>
  <para>
    The one thing to be aware of is creating a flavour where the name is 
    the same extension as file extensions of your blog entries.  For example,
    the default extension for pyblosxom blog entries is 
    <filename>.txt</filename>.  Don't create a "txt" flavour.
  </para>
</warning>

<para>
PyBlosxom comes with a series of flavours: html, rss ("RSS 0.9.1), rss20
(RSS 2.0), and atom (Atom 1.0).  These flavours come as part of PyBlosxom
and they will work out of the box with no modifications and no configuration
changes.  Additionally, you can override all or portions of these flavours.
We'll talk about this a little later.
</para>
<para>
Additionally, there is a flavour registry on the PyBlosxom web-site
at http://pyblosxom.sourceforge.net/ .  This is where you can submit
flavours that you have created and see flavours other people have
created and submitted.
</para>
</sect1>

<sect1>
<title>Where To Put Your Flavour Files</title>
<para>
If you want to override the existing flavours, add new flavours, or
develop your own flavours, you should set the <varname>flavourdir</varname>
property of your <filename>config.py</filename> file.  I have this directory
parallel to my datadir.  In my flavourdir, I have flavour directories--one
for each flavour in my blog:
</para>
<programlisting role="ascii"><![CDATA[/home
 |-- willg/
    |-- myblog/
       |-- entries/        <-- my datadir
       |  |-- content/        <-- category
       |  |-- dev/            <-- category
       |  |-- links/          <-- category
       |
       |-- flavours/       <-- my flavourdir
          |-- html.flav/      <-- defines the html flavour
          |-- xml.flav/       <-- defines the xml flavour
          |-- links/          <-- parallels the links category
             |-- html.flav/   <-- defines the html flavour for the links category
]]></programlisting>
<para>
In my flavourdir, I have two flavour directories <filename>html.flav</filename>
and <filename>xml.flav</filename>.  The <filename>xml.flav</filename> is
a copy of the <filename>atom.flav</filename> directory that comes with
PyBlosxom.  I copied it so that I could use "xml" for the flavour name.
This isn't necessarily a wonderful idea, but it helped me upgrade my blog
without disturbing planets and writing lots of .htaccess redirects and
such.
</para>
<para>
You'll notice there's an <filename>html.flav</filename> directory in
the <filename>links</filename> directory.  When someone is looking at
items in the links directory, then PyBlosxom will use this html flavour.
</para>
<para>
The order of overiding works like this:
</para>
<orderedlist numeration="arabic">
<listitem>
  <para>
    PyBlosxom looks for flavour files that came with PyBlosxom
  </para>
</listitem>
<listitem>
  <para>
    PyBlosxom starts at the root of the flavourdir and looks for flavour
    files there.  If there are some, then these files override the files
    PyBlosxom has found so far.
  </para>
</listitem>
<listitem>
  <para>
    PyBlosxom iterates through category directories in the flavourdir if
    there are any that are parallel to the datadir and looks for flavour
    directories there.  If there are some, then those files override the
    files it has so far.
  </para>
</listitem>
</orderedlist>

<para>
This allows you to easily override specific templates in your blog
(like the header or footer) depending on what category the user is looking
at.
</para>
<note>
  <title>backwards compatability</title>
  <para>
    PyBlosxom is backwards compatible with previous versions of
    PyBlosxom.  You can put your flavour files in your datadir.  You
    can also put your flavour files in the categories of your datadir.
    However you cannot have a flavourdir and put flavour files in your
    datadir--PyBlosxom will look at EITHER your datadir OR your
    flavourdir for flavour files.
  </para>
</note>
</sect1>

<sect1>
<title>Template Variables</title>
<para>
This is the list of variables that are available to your templates.
Additionally, plugins that you are using will add additional variables.
</para>
<para>
To use a variable in a template, prefix the variable name with a $.
For example, this would expand to the blog's title as a h2:
</para>
<programlisting role="html"><![CDATA[<h2>$title</h2>
]]></programlisting>
<para>
To get a complete list of what variables are available in your blog, use 
the debug renderer by changing the renderer property in your 
<filename>config.py</filename> file to debug like this:
</para>
<programlisting role="python">py["renderer"] = "debug"
</programlisting>
<para>
That will tell you all kinds of stuff about the data structures involved 
in the request.  Don't forget to change it back when you're done!
</para>

<sect2>
<title>URL Encoding and Escaping of Template Variables</title>
<para>
PyBlosxom 1.3 allows you to escape and URL encode any variables by adding
"_escaped" or "_urlencoded" to the end of the variable name.
</para>
<para>
For example, <varname>title_escaped</varname> is an escaped form of
the title with ' (single-quote) replaced with &apos; and " (double-quote)
replaced with &quot;.
</para>
<para>
<varname>title_urlencoded</varname> is a URL encoded form of the title
which uses the Python urllib.
</para>
</sect2>

<sect2>
<title>Variables From config.py</title>
<para>
These template variables are available to all templates. They come directly 
from your <filename>config.py</filename> file.
</para>

<table>
<title>Template variables from config.py</title>
<tgroup cols="3">
<thead>
<row>
<entry>variable name</entry>
<entry>description</entry>
<entry>example</entry>
</row>
</thead>
<tbody>
<row>
<entry>blog_description</entry>
<entry>the description of the blog</entry>
<entry>blosxom with a touch of python</entry>
</row>
<row>
<entry>blog_title</entry>
<entry>the title of the blog</entry>
<entry>RoughingIT - pyblosxom : /weblogs/tools/pyblosxom</entry>
</row>
<row>
<entry>blog_language</entry>
<entry>the language of the blog</entry>
<entry>en</entry>
</row>
<row>
<entry>blog_encoding</entry>
<entry>the encoding of the blog</entry>
<entry>iso8859-1</entry>
</row>
<row>
<entry>blog_author</entry>
<entry>the author of the blog (hopefully you)</entry>
<entry>Joe Dirt</entry>
</row>
<row>
<entry>blog_email</entry>
<entry>the email address of the author of the blog (feel free to obfuscate it)</entry>
<entry>joe at joe dot com</entry>
</row>
</tbody>
</tgroup>
</table>

<para>
Additionally, any other properties you set in <filename>config.py</filename> 
are available in your templates.  If you wanted to create a 
<varname>blog_images</varname> variable holding the base url of the directory 
with all your images:
</para>

<example><title>creating your own config.py variables</title>
<programlisting role="python">py["blog_images"] = "http://www.joe.com/~joe/images/"
</programlisting>
</example>

<para>
to your <filename>config.py</filename> file and it would be available in 
all your templates.
</para>
</sect2>

<sect2>
<title>Calculated Template Variables</title>
<para>
These template variables are available to all templates as well.  They are 
calculated based on the request.
</para>

<table>
<title>Calculated template variables</title>
<tgroup cols="3">
<thead>
<row>
<entry>variable name</entry>
<entry>description</entry>
<entry>example</entry>
</row>
</thead>
<tbody>
<row>
<entry>content_type</entry>
<entry>the content type of this page</entry>
<entry>text/html</entry>
</row>
<row>
<entry>root_datadir</entry>
<entry>the root datadir of this page?</entry>
<entry>/home/subtle/blosxom/weblogs/tools/pyblosxom</entry>
</row>
<row>
<entry>url</entry>
<entry>the PATH_INFO to this page</entry>
<entry>pyblosxom/weblogs/tools/pyblosxom</entry>
</row>
<row>
<entry>flavour</entry>
<entry>the flavour for this page</entry>
<entry>html</entry>
</row>
<row>
<entry>latest_date</entry>
<entry>the date of the most recent entry that is going to show</entry>
<entry>Tue, 15 Nov 2005</entry>
</row>
<row>
<entry>latest_w3cdate</entry>
<entry>the date of the most recent entry that is going to show in w3cdate format</entry>
<entry>2005-11-13T17:50:02Z</entry>
</row>
<row>
<entry>latest_rfc822date</entry>
<entry>the date of the most recent entry that is going to show in RFC 822 format</entry>
<entry>Sun, 13 Nov 2005 17:50 GMT</entry>
</row>
<row>
<entry>pi_yr</entry>
<entry>the four-digit year the user requested</entry>
<entry>2002</entry>
</row>
<row>
<entry>pi_mo</entry>
<entry>the month name the user requested</entry>
<entry>Sep</entry>
</row>
<row>
<entry>pi_da</entry>
<entry>the day number the user requested</entry>
<entry>15</entry>
</row>
<row>
<entry>pi_bl</entry>
<entry>the entry the user requested to see</entry>
<entry>weblogs/tools/pyblosxom</entry>
</row>
<row>
<entry>pyblosxom_version</entry>
<entry>the version number and release date of the pyblosxom version you're using</entry>
<entry>1.2 3/25/2005</entry>
</row>
</tbody>
</tgroup>
</table>

</sect2>

<sect2>
<title>Template Variables Only Available in the story Template</title>
<para>
These template variables are only available in your story template.
</para>
<table>
<title>Variables in the story template</title>
<tgroup cols="3">
<thead>
<row>
<entry>variable name</entry>
<entry>description</entry>
<entry>example</entry>
</row>
</thead>
<tbody>
<row>
<entry>title</entry>
<entry>title of the entry</entry>
<entry>First Post!</entry>
</row>
<row>
<entry>filename</entry>
<entry>template file name and path of the entry</entry>
<entry>/home/subtle/blosxom/weblogs/tools/pyblosxom/index.txt</entry>
</row>
<row>
<entry>file_path</entry>
<entry>just the filename and extensions of the entry</entry>
<entry>index.txt</entry>
</row>
<row>
<entry>fn</entry>
<entry>just the filename (no extension)</entry>
<entry>index</entry>
</row>
<row>
<entry>absolute_path</entry>
<entry>the category/path of the entry</entry>
<entry>weblogs/tools/pyblosxom</entry>
</row>
<row>
<entry>body</entry>
<entry>the text of the entry</entry>
<entry>first post!</entry>
</row>
<row>
<entry>tb_id</entry>
<entry>the trackback id of the entry</entry>
<entry>_index</entry>
</row>
<row>
<entry>path</entry>
<entry>the category/path of the entry</entry>
<entry>weblogs/tools/pyblosxom</entry>
</row>
<row>
<entry>yr</entry>
<entry>the four digit year of the mtime of this entry</entry>
<entry>2004</entry>
</row>
<row>
<entry>mo</entry>
<entry>the month abbreviation of the mtime of this entry</entry>
<entry>Jan</entry>
</row>
<row>
<entry>mo_num</entry>
<entry>the month number of the mtime of this entry</entry>
<entry>01</entry>
</row>
<row>
<entry>ti</entry>
<entry>the hour and minute of the mtime of this entry</entry>
<entry>16:40</entry>
</row>
<row>
<entry>date</entry>
<entry>the date string of the mtime of this entry</entry>
<entry>Sun, 23 May 2004</entry>
</row>
<row>
<entry>w3cdate</entry>
<entry>the date in w3cdate format</entry>
<entry>2005-11-13T17:50:02Z</entry>
</row>
<row>
<entry>rfc822date</entry>
<entry>the date in RFC 822 format</entry>
<entry>Sun, 13 Nov 2005 17:50 GMT</entry>
</row>
<row>
<entry>fulltime</entry>
<entry>the date in YYYYMMDDHHMMSS format</entry>
<entry>20040523164000</entry>
</row>
<row>
<entry>timetuple</entry>
<entry>the time tuple (year, month, month-day, hour, minute, second, week-day, year-day, isdst)</entry>
<entry>(2004, 5, 23, 16, 40, 0, 6, 144, 1)</entry>
</row>
<row>
<entry>mtime</entry>
<entry>seconds since the epoch</entry>
<entry>1085348400.0</entry>
</row>
<row>
<entry>dw</entry>
<entry>the day of the week</entry>
<entry>Sunday</entry>
</row>
<row>
<entry>da</entry>
<entry>the day of the month</entry>
<entry>23</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2>
<title>Template Variables From Plugins</title>
<para>
Additionally, many plugins will create additional variables.  Refer to the 
plugin's documentation for what variables it creates, where the variables 
are available, and what the variables do.
</para>
</sect2>

</sect1>


<sect1>
<title>Invoking a Flavour</title>
<para>
The flavour for a given page is specified in the extension of the file 
being requested.  For example:
</para>

<table>
<title>Examples of request URIs</title>
<tgroup cols="2">
<thead>
<row>
<entry>url</entry>
<entry>what happens</entry>
</row>
</thead>
<tbody>
<row>
<entry>http://some.blog.org/</entry>
<entry>brings up the index in the default flavour which is "html"</entry>
</row>
<row>
<entry>http://some.blog.org/index.html</entry>
<entry>brings up the index in the "html" flavour</entry>
</row>
<row>
<entry>http://some.blog.org/index.rss</entry>
<entry>brings up the index in the "rss" flavour (which by default is RSS 0.9.1)</entry>
</row>
<row>
<entry>http://some.blog.org/2004/05/index.joy</entry>
<entry>brings up the index for May of 2004 in the "joy" flavour</entry>
</row>
</tbody>
</tgroup>
</table>

<para>
Additionally, you can specify the flavour by adding a <varname>flav</varname> 
variable in the query-string.  Examples:
</para>
<table>
<title>Specifying flavour using the querystring</title>
<tgroup cols="2">
<thead>
<row>
<entry>uri</entry>
<entry>what happens</entry>
</row>
</thead>
<tbody>
<row>
<entry>http://some.blog.org/</entry>
<entry>brings up the index in the default flavour which is "html"</entry>
</row>
<row>
<entry>http://some.blog.org/?flav=rss</entry>
<entry>brings up the index in the "rss" flavour</entry>
</row>
<row>
<entry>http://some.blog.org/2004/05/index?flav=joy</entry>
<entry>brings up the index for May of 2004 in the "joy" flavour</entry>
</row>
</tbody>
</tgroup>
</table>
<para>
You can change the default flavour from <literal>html</literal> to some other 
flavour in your <filename>config.py</filename> file with the 
<varname>default_flavour</varname> property:
</para>
<example><title>default_flavour variable value</title>
<programlisting role="python">py["default_flavour"] = "joy"
</programlisting>
</example>
<para>
Doing this will set the default flavour to use when the URI the user has
used doesn't specify which flavour to use.  For example, if you do the
above, then the following URIs will use the default flavour:
</para>
<table>
<title>Default flavour used</title>
<tgroup cols="2">
<thead>
<row>
<entry>uri</entry>
<entry>what happens</entry>
</row>
</thead>
<tbody>
<row>
<entry>http://www.joe.com/cgi-bin/pyblosxom.cgi/2005/03</entry>
<entry>uses the default flavour which is set to "joy"</entry>
</row>
<row>
<entry>http://www.joe.com/cgi-bin/pyblosxom.cgi/2005/03/?flav=html</entry>
<entry>uses the html flavour as specified by flav=</entry>
</row>
</tbody>
</tgroup>
</table>
</sect1>


<sect1>
<title>Order of Operations to Figure Out Which Flavour to Use</title>
<para>
We know that you can specify the default flavour to use in the 
<filename>config.py</filename> file with the <varname>default_flavour</varname> 
property.  We know that the user can specify which flavour to use by the file 
extension of the URI.  We also know that the user can specify which flavour 
to use by using the <varname>flav</varname> variable in the query string.
</para>
<para>
The order in which we figure out which flavour to use is this:
</para>
<orderedlist numeration="arabic">
<listitem>
  <para>
    look at the URI extension: if the URI has one, then we use that.
  </para>
</listitem>
<listitem>
  <para>
    look at the <varname>flav</varname> querystring variable: if there is one, 
    then we use that.
  </para>
</listitem>
<listitem>
  <para>
    look at the <varname>default_flavour</varname> property in the 
    <filename>config.py</filename> file: if there is one, then we use that.
  </para>
</listitem>
<listitem>
  <para>
    use the <literal>html</literal> flavour
  </para>
</listitem>
</orderedlist>
</sect1>


<sect1>
<title>Examples of Templates</title>
<para>
For examples of templates and flavours, see the included flavours
that come with your PyBlosxom installation.
</para>
</sect1>
</chapter>
