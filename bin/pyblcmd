#!/usr/bin/env python

#######################################################################
# This file is part of PyBlosxom.
#
# Copyright (c) 2003 - 2007 Wari Wahab
# 
# PyBlosxom is distributed under the MIT license.  See the file LICENSE
# for distribution details.
#
# $Id: pyblosxom.py 913 2006-08-08 20:29:42Z willhelm $
#######################################################################

import os, sys

# this allows for a config.py override
script = os.environ.get('SCRIPT_FILENAME', None)
if script is not None:
    sys.path.insert(0, os.path.dirname(script))

sys.path.insert(0, os.getcwd())


def parse_args(args):
    """
    Takes in a list of args and parses it out into a hashmap of arg-name 
    to value(s).

    @param args: the list of command-line arguments
    @type  args: list of strings

    @return: list of tuples of (arg, value) pairings
    @rtype: list of tuples of (string, string)
    """
    i = 0
    optlist = []
    while (i < len(args)):
        if args[i].startswith("-"):
            if (i+1 < len(args)):
                if not args[i+1].startswith("-"):
                    optlist.append((args[i], args[i+1]))
                    i = i + 1
                else:
                    optlist.append((args[i], ""))
            else:
                optlist.append((args[i], ""))

        else:
            optlist.append(("", args[i]))

        i = i + 1
    return optlist

HELP = """Syntax: pyblcmd [path-opts] [args]

PATH OPTIONS:

  -c, --config

     This specifies the location of the config.py file for the blog 
     you want to work with.  If the config.py file is in the current 
     directory, then you don't need to specify this.

     Note: pyblcmd will use the "codebase" parameter in your config.py
     file to locate the version of PyBlosxom you're using.

ARGUMENTS:

  -v, --version

     Prints the PyBlosxom version and some other information.

  -h, --help

     Prints this help text

  -s, --static [incremental]

     Statically renders your blog.  Use "incremental" to do an incremental 
     rendering.

  -t, --test

     Tests your installation.  This can also be done with
     "./pyblosxom.cgi".


Additional flags and options may be available through plugins that
you have installed.  Refer to plugin documentation (usually found
at the top of the plugin file) for more information.
"""

def get_version():
    from Pyblosxom.pyblosxom import PyBlosxom
    from Pyblosxom.pyblosxom import VERSION_DATE

    return "PyBlosxom: pyblcmd: %s" % VERSION_DATE

def get_help():
    return HELP

if __name__ == '__main__':

    # this allows for a config.py override
    script = os.environ.get('SCRIPT_FILENAME', None)
    if script is not None:
        sys.path.insert(0, os.path.dirname(script))

    # parse initial command line variables
    optlist = parse_args(sys.argv[1:])
    for mem in optlist:
        if mem[0] in ["-c", "--config"]:
            m = mem[1]
            if m.endswith("config.py"):
                m = m[0:-9]
            print "Appending %s to sys.path for config.py location." % m
            sys.path.append(m)


    # the configuration properties are in a dict named "py" in
    # the config module
    print "Trying to import the config module...."
    try:
        from config import py as cfg
    except:
        print "Cannot find your config.py file.  Please execute pyblcmd in the"
        print "directory with your config.py file in it."
        sys.exit(0)

    # If the user defined a "codebase" property in their config file,
    # then we insert that into our sys.path because that's where the
    # PyBlosxom installation is.
    # NOTE: this _has_ to come before any PyBlosxom calls.
    if cfg.has_key("codebase"):
        sys.path.append(cfg["codebase"])

    print get_version()

    if len(sys.argv) == 1:
        print get_help()
        sys.exit(0)

    from Pyblosxom.pyblosxom import PyBlosxom
    
    p = PyBlosxom(cfg, {})

    for mem in optlist:
        if mem[0] in ["-v", "--version"]:
            # we print the version already, so if we do it again here
            # it'd be doing it twice.
            # print get_version()
            sys.exit(0)

        elif mem[0] in ["-h", "--help"]: 
            print get_help()
            sys.exit(0)

        elif mem[0] in ["--static", "-s"]:
            if "--incremental" in sys.argv:
                incremental = 1
            else:
                incremental = 0
            p.runStaticRenderer(incremental)

        elif mem[0] in ["--test", "-t"]:
            p.testInstallation()
